# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

scalar AWSDateTime

type Ingredient {
  category: String!
  createdAt: AWSDateTime!
  description: String
  id: ID!
  measurement: Measurement!
  name: String!
  price: Float
  updatedAt: AWSDateTime!
}

input IngredientInput {
  category: String!
  description: String
  measurement: Measurement!
  name: String!
  price: Float
}

type IngredientQueryResult {
  items: [Ingredient!]!
  nextToken: String
}

enum Measurement {
  g
  kg
  l
  ml
  unit
}

type Mutation {
  ingredientCreate(input: IngredientInput!): Ingredient!
  saleCreate(input: SaleInput!): SaleKey!
}

type Query {
  ingredientGet(id: ID!): Ingredient!
  ingredientList(input: QueryPaginationInput): IngredientQueryResult!
  saleByProduct(input: SaleListByProductInput!): SaleByProductQueryResult!
  saleGet(input: SaleKeyInput!): SaleEntity!
  saleList(input: SaleListInput!): SaleQueryResult!
}

input QueryPaginationInput {
  limit: Int
  nextToken: String
}

type Sale {
  createdAt: AWSDateTime!
  date: String!
  saleId: ID!
  total: Float!
  updatedAt: AWSDateTime!
  venueId: ID!
}

type SaleByProductQueryResult {
  items: [SaleDetail!]!
  nextToken: String
}

type SaleDetail {
  productId: ID!
  quantity: Int!
  saleId: ID!
  subtotal: Float!
  venueId: ID!
}

input SaleDetailInput {
  productId: String!
  quantity: Int!
  subtotal: Float!
}

type SaleEntity {
  createdAt: AWSDateTime!
  date: String!
  details: [SaleDetail!]!
  saleId: ID!
  total: Float!
  updatedAt: AWSDateTime!
  venueId: ID!
}

input SaleInput {
  date: String!
  details: [SaleDetailInput!]!
  total: Float!
  venueId: ID!
}

type SaleKey {
  saleId: ID!
  venueId: ID!
}

input SaleKeyInput {
  saleId: ID!
  venueId: ID!
}

input SaleListByProductInput {
  limit: Int
  nextToken: String
  productId: ID!
  venueId: ID!
}

input SaleListInput {
  limit: Int
  nextToken: String
  venueId: ID!
}

type SaleQueryResult {
  items: [Sale!]!
  nextToken: String
}
